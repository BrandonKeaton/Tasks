library(swirl)
swirl()
dir.create(file.path('testdir2','testdir3')
TRUE
dir.create(file.path('testdir2','testdir3'),recursive=TRUE)
setwd(old.dir)
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir<- getwd()
old.dir<- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path('folder1','folder2')
?dir.create
dir.create(file.path('testdir2','testdir3'),recursive=TRUE
dir.create(file.path('testdir2','testdir3'), recursive=TRUE
dir.create(file.path('testdir2', 'testdir3'),recursive=TRUE
recursive=TRUE
dir.create(file.path('testdir2', 'testdir3'), recursive=TRUE
TRUE
dir.create(file.path('testdir2', 'testdir3'), recursive=TRUE
setwd(old.dir)
dir.create(file.path('testdir2', 'testdir3'), recursive=TRUE)
setwd(old.dir)
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq
)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
x<-c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
INF-INF
INF - INF
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
c(x[3], x[5], x[7])
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar =
| 2, norf = NA)
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
c(11, 2, NA)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect[bar]
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- as.matrix(1:20)
my_matrix2 <- as.matrix(1:20, nrow =4, ncol=5, byrow = FALSE)
my_matrix2 <- matrix(1:20, nrow =4, ncol=5, byrow = FALSE)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
TRUE==TRUE
(FALSE == TRUE) == FALSE
6==7
6<7
10<=10
5!=7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
|| c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any(int<0)
any(int < 0)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2, 4, 5))
submit()
> submit()
boring_function <- function(x) {x}
submit()
submit()
submit(boring_function <- function(x) {x})
submit()
boring_function('My first function!')
boring_function
submit()
submit()
submit()
submit()
my_mean(c(4, 5, 10))
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[-1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[-1]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
telegram(c("Please", "tell", "me", "Im", "almost", "done"))
submit()
submit()
submit()
mad_libs(place = Beckley, adjective = "strange", noun = "moose")
mad_libs(place = "Beckley, adjective = "strange", noun = "moose")
mad_libs(place = "Beckley", adjective = "strange", noun = "moose")
submit()
"I love R"
"I" %p% "love" %p% "R!"
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y =cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x) = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stop Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stop Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stop Distance")
(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance)
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance", title = "My Plot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, xlim = c(10, 15))
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data("mtcars")
data(mtcars)
str(mtcars)
?boxplot
boxplot(mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
Data
setwd("C:\\Users\\Brandon\\Desktop\\Tasks\\Task_02")
Data <- read.csv("http://jonsmitchell.com/data/beren.csv" , stringsAsFactors = F)
Data
write.csv(Data, "raw_data.csv", quote=F)
length(Data)
nrow(Data)
ncol(Data)
colnames(Data)
head(Data)
Data[1 ,]
Data[2 ,]
Data[1:3 ,]
Data[1:3 , 4]
Data[1:5 , 1:3]
beren <- Data
Feeds <- which(beren[,9] == "bottle")
berenMilk <- beren[Feeds,]
head(berenMilk)
Feeds <- which(beren[,"event"] == "bottle")
Feeds <- which(beren$event == "bottle")
dayID <- apply(beren, 1, function(x) paste(x[1:3], collapse="-"))
dateID <- sapply(dayID, as.Date, format = "%Y-%m-%d", origin =" 2019-04-18")
beren$age <- dateID - dateID[which(beren$event == "birth")]
head(beren)
beren2 <- beren
beren3 <- beren2[order(beren2$age),]
write.csv(beren3, "beren_new.csv", quote=F, row.names = FALSE)
avgMilk <- mean(beren$value[Feeds])
avgFeed <- tapply(beren$value[Feeds], beren$age [Feeds], mean)
varFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], var)
totalfeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], sum)
numFeeds <- tapply(beren3$value[Feeds] , beren3$age[Feeds], length)
Feeds <- which(beren3$event == "bottle")
cor(beren3$value[Feeds], beren3$age[Feeds])
cor.test(beren3$value[Feeds], beren3$age[Feeds])
berenCor <- cor.test(beren3$value[Feeds], beren3$age[Feeds])
summary(berenCor)
berenANOVA <- aov(beren3$value[Feeds]~beren3$caregiver[Feeds])
boxplot( beren3$value[Feeds]~beren3$caregiver[Feeds], xlab= "who gave the bottle", ylab = "amount of milk consumed (oz)")
par(las=1, mar=c(5,5,1,1), mgp=c(2, 05, 0), tck=-.01)
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab = " age in days", ylab="ounces of milk")
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab=" age in days", ylab="ounces of milk")
plot(as.numeric(names(totalFeed)), totalfeed, type="b", pch=16, xlab=" age in days", ylab="ounces of milk")
plot(as.numeric(names(totalfeed)), totalfeed, type="b", pch=16, xlab=" age in days", ylab="ounces of milk")
abline(h=avgFeed, lty=2, col='red')
pdf("r02b-totalMilkByDay.pdf", height = 4, width = 4)
par(las=1, mar=c(5,5,1,1,), mgp=c(2, 0.5,0), tck=-0.01)
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5,0), tck=-0.01)
(as.numeric(names(totalfeed)), totalfeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")
Feeds <- which(beren3$event == "bottle")
avgMilk <- mean(beren$value[Feeds])
avgFeed <- tapply(beren$value[Feeds], beren$age [Feeds], mean)
varFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], var)
totalfeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], sum)
numFeeds <- tapply(beren3$value[Feeds] , beren3$age[Feeds], length)
cor(beren3$value[Feeds], beren3$age[Feeds])
cor.test(beren3$value[Feeds], beren3$age[Feeds])
berenCor <- cor.test(beren3$value[Feeds], beren3$age[Feeds])
aavgFeed
avgFeed
cor(beren3$value[Feeds], beren3$age[Feeds])
cor.test(beren3$value[Feeds], beren3$age[Feeds])
berenCor <- cor.test(beren3$value[Feeds], beren3$age[Feeds])
cor(beren3$value[Feeds], beren3$age[Feeds])
cor.test(beren3$value[Feeds], beren3$age[Feeds])
berenCor <- cor.test(beren3$value[Feeds], beren3$age[Feeds])
cor(beren3$value[Feeds], beren3$age[Feeds])
cor.test(beren3$value[Feeds], beren3$age[Feeds])
berenCor <- cor.test(beren3$value[Feeds], beren3$age[Feeds])
cor(beren3$value[Feeds], beren3$age[Feeds])
cor.test(beren3$value[Feeds], beren3$age[Feeds])
berenCor <- cor.test(beren3$value[Feeds], beren3$age[Feeds])
cor(beren3$value[Feeds], beren3$age[Feeds])
cor.test(beren3$value[Feeds], beren3$age[Feeds])
berenCor <- cor.test(beren3$value[Feeds], beren3$age[Feeds])
cor(beren3$value[Feeds], beren3$age[Feeds])
cor.test(beren3$value[Feeds], beren3$age[Feeds])
berenCor <- cor.test(beren3$value[Feeds], beren3$age[Feeds])
cor(beren3$value[Feeds], beren3$age[Feeds])
cor.test(beren3$value[Feeds], beren3$age[Feeds])
berenCor <- cor.test(beren3$value[Feeds], beren3$age[Feeds])
cor(beren3$value[Feeds], beren3$age[Feeds])
cor.test(beren3$value[Feeds], beren3$age[Feeds])
berenCor <- cor.test(beren3$value[Feeds], beren3$age[Feeds])
cor(beren3$value[Feeds], beren3$age[Feeds])
cor.test(beren3$value[Feeds], beren3$age[Feeds])
berenCor <- cor.test(beren3$value[Feeds], beren3$age[Feeds])
cor(beren3$value[Feeds], beren3$age[Feeds])
cor.test(beren3$value[Feeds], beren3$age[Feeds])
berenCor <- cor.test(beren3$value[Feeds], beren3$age[Feeds])
#### Task 02b
beren3 <- read.csv("beren_new.csv", stringsAsFactors=F)
Feeds <- which(beren3$event == "bottle")
avgMilk <- mean(beren3$value[Feeds])
avgFeed <- tapply(beren3$value[Feeds], beren3$age [Feeds], mean)
varFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], var)
totalfeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], sum)
numFeeds <- tapply(beren3$value[Feeds] , beren3$age[Feeds], length)
# This is a correlation analysis
cor(beren3$value[Feeds], beren3$age[Feeds])
cor.test(beren3$value[Feeds], beren3$age[Feeds])
berenCor <- cor.test(beren3$value[Feeds], beren3$age[Feeds])
summary(berenCor)
boxplot( beren3$value[Feeds]~beren3$caregiver[Feeds], xlab= "who gave the bottle", ylab = "amount of milk consumed (oz)")
dev.off()
dev.off()
dev.off()
boxplot( beren3$value[Feeds]~beren3$caregiver[Feeds], xlab= "who gave the bottle", ylab = "amount of milk consumed (oz)")
par(las=1, mar=c(5,5,1,1), mgp=c(2, 05, 0), tck=-.01)
plot(as.numeric(names(totalfeed)), totalfeed, type="b", pch=16, xlab=" age in days", ylab="ounces of milk")
abline(h=avgFeed, lty=2, col='red')
par(las=1, mar=c(5,5,1,1), mgp=c(2, 05, 0), tck=-.01)
plot(as.numeric(names(totalfeed)), totalfeed, type="b", pch=16, xlab=" age in days", ylab="ounces of milk")
abline(h=mean(totalfeed), lty=2, col='red')
unique(beren3$event)
beren3[which(beren3$event == "intro_solidfood"),]
abline(v=137)
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5,0), tck=-0.01)
plot(as.numeric(names(totalfeed)), totalfeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")
abline(h=mean(totalfeed), lty=2, col='red')
pdf("r02b-totalMilkByDay.pdf", height = 4, width = 4)
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5,0), tck=-0.01)
plot(as.numeric(names(totalfeed)), totalfeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")
abline(h=mean(totalfeed), lty=2, col='red')
dev.off()
# Extra Credit
beren3
which(nap)
which(beren[,9] == "nap")
# Extra Credit
beren
Naps <- which(beren[,9]== "Nap")
Naps <- which(beren[,9]== "nap")
BerenNap <- beren[Naps,]
Naps <- which(beren3[,9]== "nap")
BerenNap <- beren3[Naps,]
Beren4 <- BerenNap
head(Beren4)
Beren4[6,7]
Beren4[6:7]
Beren4[5:6]
Beren4[7:8]
Beren4[7:8]-Beren4[5:6]
head(Beren4)
Beren4$start_minute <- Beren4$start_minute / 60
head(Beren4)
NapEndTime <- Beren4[7:8]/60
NapStartTime <- Beren4[5:6]/60
NapStartTime + NapEndTime
NapEndTime - NapStartTime
NapEndTime - NapStartTime
Beren4$end_minute <- Beren4$end_minute / 60
NapEndTime <- Beren4[7] : Beren4$end_minute /60
Beren4$NapStartTime <- start_hour : Beren4$start_minute
Beren4$NapStartTime <- Beren4$start_hour : Beren4$start_minute
beren3 <- read.csv("beren_new.csv", stringsAsFactors=F)
Naps <- which(beren3[,9]== "nap")
BerenNap <- beren3[Naps,]
Beren4 <- BerenNap
head(Beren4)
Beren4[5:6]
Beren4[7:8]
Beren4[7:8]-Beren4[5:6]
head(Beren4)
NapEndTime <- Beren4[7:8]/60
NapStartTime <- Beren4[5:6]/60
NapEndTime - NapStartTime
NapStartTime + NapEndTime
Beren4$end_minute <- Beren4$end_minute / 60
Beren4$start_minute <- Beren4$start_minute / 60
Beren4$NapStartTime <- Beren4$start_hour + Beren4$start_minute
Beren4$NapEndTime <- Beren4$end_hour + Beren4$end_minute
head(Beren4)
duration <- Beren4$NapEndTime - Beren4$NapStartTime
TotalNapsEachDay <- tapply(Beren4$day[Naps], Beren4$age [Naps], sum)
TotalSleepTimePerNap <- TotalNapsEachDay
par(las=1, mar=c(5,5,1,1), mgp=c(2, 05, 0), tck=-.01)
plot(as.numeric(names(TotalSleepTimePerNap)), TotalSleepTimePerNap, type="b", pch=16, xlab="Day", ylab="TotalSleptTime")
cor.test(beren4$NapStartTime[TotalSleepTimePerNap], beren4$duration[duration])
cor.test(Beren4$NapStartTime[TotalSleepTimePerNap], Beren4$duration[duration])
cor.test(Beren4$age, duration)
setwd()
beren3 <- read.csv("beren_new.csv", stringsAsFactors=F)
Naps <- which(beren3[,9]== "nap")
BerenNap <- beren3[Naps,]
Beren4 <- BerenNap
head(Beren4)
Beren4[5:6]
Beren4[7:8]
Beren4[7:8]-Beren4[5:6]
head(Beren4)
NapEndTime <- Beren4[7:8]/60
NapStartTime <- Beren4[5:6]/60
NapEndTime - NapStartTime
NapStartTime + NapEndTime
Beren4$end_minute <- Beren4$end_minute / 60
Beren4$start_minute <- Beren4$start_minute / 60
Beren4$NapStartTime <- Beren4$start_hour + Beren4$start_minute
Beren4$NapEndTime <- Beren4$end_hour + Beren4$end_minute
duration <- Beren4$NapEndTime - Beren4$NapStartTime
TotalNapsEachDay <- tapply(Beren4$day[Naps], Beren4$age [Naps], sum)
TotalSleepTimePerNap <- TotalNapsEachDay
par(las=1, mar=c(5,5,1,1), mgp=c(2, 05, 0), tck=-.01)
plot(as.numeric(names(TotalSleepTimePerNap)), TotalSleepTimePerNap, type="b", pch=16, xlab="Day", ylab="TotalSleptTime")
cor.test(Beren4$age, duration)
Beren4$end_minute <- Beren4$end_minute / 60
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5, 0), tck=-.01)
plot(as.numeric(names(TotalSleepTimePerNap)), TotalSleepTimePerNap, type="b", pch=16, xlab="Day", ylab="TotalSleptTime")
Task 02C
#
#Task 02C
#
#Task 02C
#
setwd("C:\\Users\\Brandon\\Desktop\\Tasks\\Task_02")
Beren4
Beren3
beren3
BowelMovements <- which(beren3[,9] == "bowel")
BowelMovements <- which(beren3[,9] == "bowel")
SolidFoodDays <- which(beren3)[,9] == "solids")
SolidFoodDays <- which(beren3[,9] == "solids")
SolidFoodWeight <- which(SolidFoodDays[,10] == "value")
avgBowelMovements <- mean(beren3$event[BowelMovements])
avgBowelMovements <- mean(beren3$events[BowelMovements])
berenDiapers <- beren3[BowelMovements,]
berenDiapers <- beren3[BowelMovements,]
head(berenDiapers)
ndirty <- tapply(berenDiapers$event, berenDiapers$age, length)
ndirty
berenDiapers <- beren3[BowelMovements,]
ndirty <- tapply(berenDiapers$event, berenDiapers$age, length)
SolidFoodDays <- which(beren3[,9] == "solids")
berenSolids <- beren3[SolidFoodDays,]
solidSum <- tapply(berenSolids$value, berenSolids$age, sum)
solidSum
solidSum <- tapply(berenSolids$value, berenSolids$age, sum, na.rm=T)
solidSum
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5, 0), tck=-.01)
plotplot(x = solidSum, y =nDirty)
plot(x = solidSum, y =nDirty)
plot(x = solidSum, y =ndirty)
ncolumn(ndirty)
ncol(ndirty)
ncol(solidSum)
nrow(ndirty)
nrow(solidSum)
