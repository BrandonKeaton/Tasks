library(swirl)
swirl()
dir.create(file.path('testdir2','testdir3')
TRUE
dir.create(file.path('testdir2','testdir3'),recursive=TRUE)
setwd(old.dir)
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir<- getwd()
old.dir<- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path('folder1','folder2')
?dir.create
dir.create(file.path('testdir2','testdir3'),recursive=TRUE
dir.create(file.path('testdir2','testdir3'), recursive=TRUE
dir.create(file.path('testdir2', 'testdir3'),recursive=TRUE
recursive=TRUE
dir.create(file.path('testdir2', 'testdir3'), recursive=TRUE
TRUE
dir.create(file.path('testdir2', 'testdir3'), recursive=TRUE
setwd(old.dir)
dir.create(file.path('testdir2', 'testdir3'), recursive=TRUE)
setwd(old.dir)
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq
)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
x<-c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
INF-INF
INF - INF
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
c(x[3], x[5], x[7])
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar =
| 2, norf = NA)
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
c(11, 2, NA)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect[bar]
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- as.matrix(1:20)
my_matrix2 <- as.matrix(1:20, nrow =4, ncol=5, byrow = FALSE)
my_matrix2 <- matrix(1:20, nrow =4, ncol=5, byrow = FALSE)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
TRUE==TRUE
(FALSE == TRUE) == FALSE
6==7
6<7
10<=10
5!=7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
|| c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any(int<0)
any(int < 0)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2, 4, 5))
submit()
> submit()
boring_function <- function(x) {x}
submit()
submit()
submit(boring_function <- function(x) {x})
submit()
boring_function('My first function!')
boring_function
submit()
submit()
submit()
submit()
my_mean(c(4, 5, 10))
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[-1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[-1]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
telegram(c("Please", "tell", "me", "Im", "almost", "done"))
submit()
submit()
submit()
mad_libs(place = Beckley, adjective = "strange", noun = "moose")
mad_libs(place = "Beckley, adjective = "strange", noun = "moose")
mad_libs(place = "Beckley", adjective = "strange", noun = "moose")
submit()
"I love R"
"I" %p% "love" %p% "R!"
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y =cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x) = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stop Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stop Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stop Distance")
(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance)
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance", title = "My Plot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, xlim = c(10, 15))
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data("mtcars")
data(mtcars)
str(mtcars)
?boxplot
boxplot(mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
trueMean <- 5
trueSD <- 5
population1 <- rnorm(1e6, trueMean1, trueSD1)
trueMean1 <- 5
trueSD <- 5
population1 <- rnorm(1e6, trueMean1, trueSD1)
trueMean1 <- 5
trueSD1 <- 5
population1 <- rnorm(1e6, trueMean1, trueSD1)
trueMean2 <- 4
trueSD2 <- 5
population2 <- rnorm(1e6, trueMean2, trueSD2)
Size <- 50
Sample1 <- sample(population1, Size)
Sample2 < sample(population2, Size)
Sample2 <- sample(population2, Size)
boxplot(Sample1, Sample2)
source("http://jonsmitchell.com/codesimFxn04.R")
source("http://jonsmitchell.com/code/simFxn04.R")
MatGrandma <- makeFounder("grandma_mom")
MatGrandpa <- makeFounder("grandpa_mom")
PatGrandma <- makeFounder("grandma_da")
PatGrandpa <- makeFounder("grandpa_da")
Alan <- makeBaby(PatGrandma, PatGrandpa)
Focus <- makeBaby(Brenda, Alan)
Brenda <- (MatGrandma, MatGrandpa)
Brenda <- makeBaby(MatGrandma, MatGrandpa)
Focus <- makeBaby(Brenda, Alan)
ToMom <- length( grep)("mom", Focus )) /  length( Focus )
ToMom <- length(grep("mom", Focus))/length(Focus)
ToMomMom <- length(grep("grandma_mom", Focus))/length(Focus)
Sibling_01 <- makeBaby(Brenda, Alan)
ToSib <- length(intersect(Focus, Sibling_01))/length(Focus)
ToMomDad <- length(grep("grandpa_mom", Focus))/length(Focus)
ManySiblings <- replicate(le3,length)(intersect)(Focus, makeBaby(Brenda, Alan)))/length(Focus))
ManySiblings <- replicate(le3,length(intersect(Focus, makeBaby(Brenda, Alan)))/length(Focus))
ManySiblings <- replicate(1e3,length(intersect(Focus, makeBaby(Brenda, Alan)))/length(Focus))
quantile(ManySiblings)
mean(ManySiblings)
plot(density(ManySiblings), main="" , xlab="proportion shared genes")
##
HWE <-function(p)  {
aa <- p^2
ab <- 2 * p * (1-p)
bb <- (1-p)^2
##
HWE <-function(p)  {
aa <- p^2
ab <- 2 * p * (1-p)
bb <- (1-p)^2
return(c(aa=aa, ab=ab, bb=bb))
}
HWE(0.5)
plot(1, 1, type="n", xlim=c(0,1), ylim=c(0,1), xlab="freq. allele a", ylab="geno. freq")
##
HWE <-function(p) {
aa <- p^2
ab <- 2 * p * (1-p)
bb <- (1-p)^2
return(c(aa=aa, ab=ab, bb=bb))
}
HWE(0.5)
plot(1, 1, type="n", xlim=c(0,1), ylim=c(0,1), xlab="freq. allele a", ylab="geno. freq")
HWE <- function(p)  {
aa <- p^2
ab <- 2 * p * (1-p)
bb <- (1-p)^2
return(c(aa=aa, ab=ab, bb=bb))
}
HWE(0.5)
plot(1, 1, type="n", xlim=c(0,1), ylim=c(0,1), xlab="freq. allele a", ylab="geno. freq")
HWE <- function(p)  {
aa <- p^2
ab <- 2 * p * (1-p)
bb <- (1-p)^2
return(c(aa=aa, ab=ab, bb=bb))
}
HWE(0.5)
plot(1, 1, type="n", xlim=c(0,1), ylim=c(0,1), xlab="freq. allele a", ylab="geno. freq")
p <- seq(from=0, to=1, by= 0.01)
GenoFreq <- t(sapply(p, HWE))
lines(p, GenoFreq[,"aa"], lwd=2, col="red")
lines(p, GenoFreq[,"ab"], lwd=2, col="purple")
lines(p, GenoFreq[,"ab"], lwd=2, col="blue")
legend("top", legend=c("aa", "ab", "bb"), col=c("red", "purple","blue"), lty=1, lwd=2, bty="n")
Pop <- simPop(500)
trueMean1 <- 5
trueSD1 <- 5
population1 <- rnorm(1e6, trueMean1, trueSD1)
trueMean2 <- 4
trueSD2 <- 5
population2 <- rnorm(1e6, trueMean2, trueSD2)
Size <- 50
Sample1 <- sample(population1, Size)
Sample2 <- sample(population2, Size)
boxplot(Sample1, Sample2)
source("http://jonsmitchell.com/code/simFxn04.R")
MatGrandma <- makeFounder("grandma_mom")
MatGrandpa <- makeFounder("grandpa_mom")
PatGrandma <- makeFounder("grandma_da")
PatGrandpa <- makeFounder("grandpa_da")
Alan <- makeBaby(PatGrandma, PatGrandpa)
Brenda <- makeBaby(MatGrandma, MatGrandpa)
Focus <- makeBaby(Brenda, Alan)
ToMom <- length(grep("mom", Focus))/length(Focus)
ToMomDad <- length(grep("grandpa_mom", Focus))/length(Focus)
ToMomMom <- length(grep("grandma_mom", Focus))/length(Focus)
Sibling_01 <- makeBaby(Brenda, Alan)
ToSib <- length(intersect(Focus, Sibling_01))/length(Focus)
ManySiblings <- replicate(1e3,length(intersect(Focus, makeBaby(Brenda, Alan)))/length(Focus))
quantile(ManySiblings)
mean(ManySiblings)
##
HWE <-function(p) {
aa <- p^2
ab <- 2 * p * (1-p)
bb <- (1-p)^2
return(c(aa=aa, ab=ab, bb=bb))
}
HWE(0.5)
plot(1, 1, type="n", xlim=c(0,1), ylim=c(0,1), xlab="freq. allele a", ylab="geno. freq")
p <- seq(from=0, to=1, by= 0.01)
GenoFreq <- t(sapply(p, HWE))
lines(p, GenoFreq[,"aa"], lwd=2, col="red")
lines(p, GenoFreq[,"ab"], lwd=2, col="purple")
lines(p, GenoFreq[,"ab"], lwd=2, col="blue")
legend("top", legend=c("aa", "ab", "bb"), col=c("red", "purple","blue"), lty=1, lwd=2, bty="n")
setwd("C:\\Users\\Brandon\\Desktop\\Tasks\\Task_08")
library(phylotools)
library("phylotools")
library(phylotools)
install.packages(phylotools)
install.packages("phylotools")
library(phylotools)
library(ape)
library(phylotools)
text.string <- "(((((((cow, pig), (bat, (lemur, human))), (robin, iguana)), coelacanth), gold_fish, trout)), shark;"
vert.tree <- read.tree(text=text.string)
vert.tree <- read.tree(text=text .string)
text.string <- "(((((((cow, pig),whale), (bat, (lemur, human))), (robin, iguana)), coelacanth), gold_fish, trout)), shark;"
vert.tree <- read.tree(text=text.string)
plot(vert.tree, edge.width=2)
nodel(frame="circle", bg='white', cex=1)
nodelabels(frame="circle", bg='white', cex=1)
text.string <- "(((((((cow, pig), whale),(bat,(lemur, human))),(robin, iguana)), coelacanth), (gold_fish, trout)),shark);"
vert.tree <- read.tree(text=text.string)
plot(vert.tree, edge.width=2)
nodelabels(frame="circle", bg='white', cex=1)
vert.tree
str(vert.tree)
tree<-read.tree(text="(((A,B),(C,D)),E);")
plotTree(tree, offset=1)
plotTree(tree ,offset=1)
plottree(tree ,offset=1)
setwd("C:\\Users\\Brandon\\Desktop\\Tasks\\Task_08")
install.packages("phylotools")
install.packages("phylotools")
library(phylotools)
library(ape)
text.string <- "(((((((cow, pig), whale),(bat,(lemur, human))),(robin, iguana)), coelacanth), (gold_fish, trout)),shark);"
vert.tree <- read.tree(text=text.string)
plot(vert.tree, edge.width=2)
nodelabels(frame="circle", bg='white', cex=1)
vert.tree
str(vert.tree)
tree<-read.tree(text="(((A,B),(C,D)),E);")
plotTree(tree ,offset=1)
tree<-read.tree(text="(((A,B),(C,D)),E):")
install.packages("ape")
install.packages("ape")
install.packages("ape")
install.packages("ape")
library(phylotools)
library(ape)
text.string <- "(((((((cow, pig), whale),(bat,(lemur, human))),(robin, iguana)), coelacanth), (gold_fish, trout)),shark);"
vert.tree <- read.tree(text=text.string)
plot(vert.tree, edge.width=2)
nodelabels(frame="circle", bg='white', cex=1)
vert.tree
str(vert.tree)
tree<-read.tree(text="(((A,B),(C,D)),E):")
plotT(tree ,offset=1)
plotTree(tree ,offset=1)
install.packages("phylotools")
install.packages("phylotools")
text.string <- "(((((((cow, pig), whale),(bat,(lemur, human))),(robin, iguana)), coelacanth), (gold_fish, trout)),shark);"
vert.tree <- read.tree(text=text.string)
setwd("C:\\Users\\Brandon\\Desktop\\Tasks\\Task_08")
install.packages("phylotools")
install.packages("ape")
library(phylotools)
library(ape)
text.string <- "(((((((cow, pig), whale),(bat,(lemur, human))),(robin, iguana)), coelacanth), (gold_fish, trout)),shark);"
vert.tree <- read.tree(text=text.string)
plot(vert.tree, edge.width=2)
nodelabels(frame="circle", bg='white', cex=1)
vert.tree
str(vert.tree)
tree<-read.tree(text="(((A,B),(C,D)),E):")
plotTree(tree ,offset=1)
tiplabels(frame="circle", bg='lightblue', cex=1)
nodelabels(frame="circle", bg='white', cex=1)
tree$tip.label
tree$edge
#####
AnolisTree <- force.ultrametric(read.tree("https://jonsmitchell.com/data/anolis.tre"))
text.string <- "(((((((cow, pig), whale),(bat,(lemur, human))),(robin, iguana)), coelacanth), (gold_fish, trout)),shark);"
vert.tree <- read.tree(text=text.string)
plot(vert.tree, edge.width=2)
nodelabels(frame="circle", bg='white', cex=1)
##Question 1: The shark is more closely realted to a human than a goldfish
vert.tree
##Question 2 : No, there are not branch lengths in this tree.
str(vert.tree)
tree<-read.tree(text="(((A,B),(C,D)),E):")
#Problem
plotTree(tree ,offset=1)
#Attempts
plot.phylo(tree ,offset=1)
### Anolis Lizards
AnolisTree <- force.ultrametric(read.tree("https://jonsmitchell.com/data/anolis.tre"))
install.packages("phytools")
library(phytools)
text.string <- "(((((((cow, pig), whale),(bat,(lemur, human))),(robin, iguana)), coelacanth), (gold_fish, trout)),shark);"
vert.tree <- read.tree(text=text.string)
plot(vert.tree, edge.width=2)
nodelabels(frame="circle", bg='white', cex=1)
##Question 1: The shark is more closely realted to a human than a goldfish
vert.tree
##Question 2 : No, there are not branch lengths in this tree.
str(vert.tree)
tree<-read.tree(text="(((A,B),(C,D)),E):")
#Problem
plotTree(tree ,offset=1)
#Attempts
plot.phylo(tree ,offset=1)
#Back to the code
tiplabels(frame="circle", bg='lightblue', cex=1)
nodelabels(frame="circle", bg='white', cex=1)
tree$tip.label
tree$edge
### Anolis Lizards
AnolisTree <- force.ultrametric(read.tree("https://jonsmitchell.com/data/anolis.tre"))
text.string <- "(((((((cow, pig), whale),(bat,(lemur, human))),(robin, iguana)), coelacanth), (gold_fish, trout)),shark);"
vert.tree <- read.tree(text=text.string)
plot(vert.tree, edge.width=2)
nodelabels(frame="circle", bg='white', cex=1)
##Question 1: The shark is more closely realted to a human than a goldfish
vert.tree
##Question 2 : No, there are not branch lengths in this tree.
str(vert.tree)
tree<-read.tree(text="(((A,B),(C,D)),E):")
#Problem
plotTree(tree ,offset=1)
